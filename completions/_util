#compdef util

# vim: set ft=zsh:

_util() {
  if [ ! -d "$SU_SCRIPTS_PATH" ]; then
    return
  fi

  # Captures all arguments and suggests the files/folders in
  # $SU_SCRIPTS_PATH. If a file is found, the files in the
  # current folder are suggested
  #
  # util command subcommand -> tries to find $SU_SCRIPTS_PATH/command/subommand

  _arguments -C \
    '*::arg:->args'

  local current_path="$SU_SCRIPTS_PATH"
  for word in $words; do
    current_path="$current_path/$word"
    if [ -f "$current_path"* ]; then
      local script_path=$(command ls "$current_path"* | head -n 1)
      break
    fi
  done

  local all_subcommands_but_the_last=("${(j:/:)words[1,CURRENT-1]}")
  local last_command="$words[CURRENT]"
  local scripts_path_with_arguments="$SU_SCRIPTS_PATH/$all_subcommands_but_the_last"

  local files=($(
    find "$scripts_path_with_arguments" \
      -maxdepth 1 \
      -mindepth 1 \
      -name "$last_command*" \
      -follow \
      -executable \
      -not -name "on-update*" \
      -not -name "_*" \
      -printf "%f\n" \
      2>/dev/null \
      | xargs -I{} sh -c 'echo {} | rev | cut -f2- -d "." | rev'
    ))

  if [ ${#files[@]} -eq 0 ] && [ -f $script_path ]; then
    dynamic_arguments=()
    while IFS= read -r line; do
      dynamic_arguments+=("$line")
    done < <(awk '/# Completions/ {in_section=1; next} in_section && /^$/ {exit} in_section {sub(/^# /, ""); print}' "$script_path")

    # Check for dynamic completions on the script itself following this pattern similar to this:
    # # Completions
    # # --pattern[File pattern]:pattern:
    # # --test[File pattern]:test:

    if [ ${#dynamic_arguments[@]} -gt 0 ]; then
      dynamic_arguments+=(":files:_files -W $line[1]")
      _arguments "${dynamic_arguments[@]}"
    fi
    _files
  else
    _describe 'subcommand' files
  fi
}

_util "$@"
